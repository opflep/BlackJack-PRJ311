/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import entity.ExchangeMessage;
import entity.Interface.PokerCard;
import entity.Player;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author OPF_Lep
 */
public class PlayingBoard extends javax.swing.JFrame {
    ResourceBundle RB;
    Socket socket;
    Player me;
    Player enemy;
    ArrayList<Player> players = new ArrayList<>();
    boolean notif = false;
//    OutputStream os;
//    ObjectOutputStream oos;
    int i = 0;

    /**
     * Creates new form PlayingBoard
     */
    LoadingDialog ld;
    
    public PlayingBoard() {
        ld = new LoadingDialog(this, true);
        //  pnMyCard.add(new JTextField("xxx"));
        //pnMyCard.setLayout(new FlowLayout());
        ld.setVisible(true);
        setLayout(new BorderLayout());
        setContentPane(new JLabel(new ImageIcon("C:\\Users\\OPF_Lep\\Desktop\\cards\\bg2.jpg")));
        initComponents();
        btnHit.setText(RB.getString("hit"));
        btnStand.setText(RB.getString("stand"));
        btnRemake.setText(RB.getString("remake"));
//        lblWaiting.setVisible(false);
        btnRemake.setVisible(false);
    }

    public void setRB(ResourceBundle RB) {
        this.RB = RB;
    }
    
//    private void pundle(Locale lo){
//    ResourceBundle defaul = ResourceBundle.getBundle("resource\\text");
//        System.out.println(defaul.getString("greeting"));
//        
//        Locale locale = new Locale("vi", "VN");
//        ResourceBundle vn = ResourceBundle.getBundle("resource\\text",locale);
//        
//         System.out.println(vn.getString("greeting"));
//        
//        locale = new Locale("ja", "JP");
//        ResourceBundle jp = ResourceBundle.getBundle("resource\\text",locale);
//        
//         System.out.println(jp.getString("greeting"));
//    }
    private Image getScaledImage(Image srcImg, int w, int h) {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImg.createGraphics();
        
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();
        
        return resizedImg;
    }
    
    public void addCard(int index, PokerCard card) {
        if (index == me.getIndex()) {
            showCard(card.getURL(), pnMyCard);
        } else {
            showCard("img/k.png", pnEnemyCards);
        }
    }
    
    public void showCard(String URL, JPanel panel) {
        JLabel label = new JLabel();
        ImageIcon icon = new ImageIcon(URL);
        label.setIcon(new ImageIcon(getScaledImage(icon.getImage(), 120, 150)));
        panel.add(label);
        panel.repaint();
        panel.revalidate();
    }
    
    public void showAll(int i) {
        // initComponents();
        pnEnemyCards.removeAll();
        pnMyCard.removeAll();
        showMyCards();
        showEnemyCards(i);
    }
    
    public void showMyCards() {
        for (PokerCard card : me.getCards()) {
            showCard(card.getURL(), pnMyCard);
        }
    }
    
    public void showEnemyCards(int i) {
        if (i == 1) {
            for (PokerCard card : enemy.getCards()) {
                showCard(card.getURL(), pnEnemyCards);
            }
        } else {
            for (int j = 0; j < enemy.getCards().size(); j++) {
                if (j != 0) {
                    showCard("img/k.png", pnEnemyCards);
                } else {
                    showCard(enemy.getCards().get(j).getURL(), pnEnemyCards);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        btnHit = new javax.swing.JButton();
        btnStand = new javax.swing.JButton();
        pnEnemyCards = new javax.swing.JPanel();
        pnMyCard = new javax.swing.JPanel();
        lblMyPoint = new javax.swing.JLabel();
        lblEnemyPoint = new javax.swing.JLabel();
        btnRemake = new javax.swing.JButton();
        lblNotif = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setPreferredSize(new java.awt.Dimension(950, 800));

        btnHit.setText("Hit");
        btnHit.setOpaque(false);
        btnHit.setPreferredSize(new java.awt.Dimension(80, 50));
        btnHit.setSelected(true);
        btnHit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnHitMouseExited(evt);
            }
        });
        btnHit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitActionPerformed(evt);
            }
        });

        btnStand.setText("Stand");
        btnStand.setPreferredSize(new java.awt.Dimension(80, 50));
        btnStand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStandMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStandMouseExited(evt);
            }
        });
        btnStand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStandActionPerformed(evt);
            }
        });

        pnEnemyCards.setOpaque(false);

        pnMyCard.setOpaque(false);

        btnRemake.setText("Remake");
        btnRemake.setEnabled(false);
        btnRemake.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRemakeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRemakeMouseExited(evt);
            }
        });
        btnRemake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemakeActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(lblNotif)
                        .addGap(41, 41, 41)
                        .addComponent(lblEnemyPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnMyCard, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                            .addComponent(pnEnemyCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(255, 255, 255)
                                .addComponent(btnHit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemake, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(469, 469, 469)
                                .addComponent(lblMyPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(83, 83, 83)
                        .addComponent(btnStand, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(pnEnemyCards, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEnemyPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNotif))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemake, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStand, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMyPoint, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnMyCard, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnHitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitActionPerformed
        try {
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
//        i++;
//        System.out.println(i);
//        JButton ok = new JButton(i + "xxx");
//        ok.setSize(50, 50);
//        JLabel lblTest = new JLabel("");
//        JTextField txt = new JTextField();
//        System.out.println("ok");
//        pnMyCard.setLayout(new FlowLayout());
// pnMyCard.add(new JButton("OK"));
//        pnMyCard.add(new JButton("K"));
//        ImageIcon img = new ImageIcon("img/java.png");
//        ArrayList<PokerCard> p = new ArrayList<>();
//        p.add(new HeartCard(5));
//        System.out.println(p.get(0).getURL());
//        lblTest.setSize(50, 50);
//        txt.setBackground(Color.red);
//        txt.setSize(200, 250);
//        lblTest.setBackground(Color.red);
//        lblTest.setIcon(new ImageIcon(getScaledImage(img.getImage(), 200, 250)));
//        //pnMyCard.add(ok);
//        //pnMyCard.add(txt);
//        pnMyCard.add(lblTest); //pnMyCard.add(new JButton("oOK"));
//        // FlowLayout layout = (FlowLayout) pnMyCard.getLayout();
//        //layout.addLayoutComponent("okbtn", ok);
//        pnMyCard.repaint();
//        pnMyCard.revalidate();

// repaint();
// initComponents();
            ExchangeMessage hitMessage = new ExchangeMessage();
            hitMessage.setCommand(ExchangeMessage.PLAYER_HIT);
            hitMessage.setIndex(me.getIndex());
            oos.writeObject(hitMessage);
        } catch (IOException ex) {
            Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnHitActionPerformed

    private void btnStandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStandActionPerformed
        sendStand();
//        lblWaiting.setVisible(true);
        btnStand.setEnabled(false);
    }//GEN-LAST:event_btnStandActionPerformed

    private void btnRemakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemakeActionPerformed
        
        try {
            btnRemake.setEnabled(false);
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(new ExchangeMessage(ExchangeMessage.CLIENT_SEND_REMAKE));
            remake();
        } catch (IOException ex) {
            Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRemakeActionPerformed

    private void btnHitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHitMouseEntered
        enterBtn(btnHit);
    }//GEN-LAST:event_btnHitMouseEntered

    private void btnHitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHitMouseExited
        exitBtn(btnHit);
    }//GEN-LAST:event_btnHitMouseExited

    private void btnStandMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStandMouseEntered
        enterBtn(btnStand);
    }//GEN-LAST:event_btnStandMouseEntered

    private void btnStandMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStandMouseExited
        exitBtn(btnStand);
    }//GEN-LAST:event_btnStandMouseExited

    private void btnRemakeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemakeMouseEntered
        enterBtn(btnRemake);
    }//GEN-LAST:event_btnRemakeMouseEntered

    private void btnRemakeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemakeMouseExited
        exitBtn(btnRemake);
    }//GEN-LAST:event_btnRemakeMouseExited
    public void sendStand() {
        try {
            OutputStream os = socket.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            
            ExchangeMessage standMessage = new ExchangeMessage();
            standMessage.setCommand(ExchangeMessage.PLAYER_STAND);
            standMessage.setIndex(me.getIndex());
            oos.writeObject(standMessage);
        } catch (IOException ex) {
            Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
            
        }
    }

    void enterBtn(JButton btn) {
        int x = btn.getX();
        int y = btn.getY();
        btn.setLocation(x - 10, y - 5);
        btn.setSize(btn.getWidth()+20, btn.getHeight()+10);
        btn.setForeground(Color.red);
        btn.setBackground(Color.yellow);
    }
    void exitBtn(JButton btn) {
        Color cb = jButton1.getBackground();
        Color cf = jButton1.getForeground();
        int x = btn.getX();
        int y = btn.getY();
        btn.setLocation(x + 10, y + 5);
        btn.setSize(btn.getWidth()-20, btn.getHeight()-10);
        btn.setForeground(cf);
        btn.setBackground(cb);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayingBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PlayingBoard().setVisible(true);
        });
    }
    
    public void checkBreak() {
        if ((me.getPoint() > 21 || enemy.getPoint() > 21) & notif == false) {
            sendStand();
            notif = true;
        }
       
    }
    
    public void remake() {
        players = new ArrayList<>();
        me.setCards(new ArrayList<>());
        enemy.setCards(new ArrayList<>());
        notif = false;
        //reset giao dien
//        lblWaiting.setVisible(false);
        pnEnemyCards.removeAll();
        pnMyCard.removeAll();
//        lblEnemyPoint.setText("");
//        lblMyPoint.setText("");
        btnHit.setVisible(true);
        btnStand.setVisible(true);
        btnStand.setEnabled(true);
        btnRemake.setVisible(false);
        pnMyCard.repaint();
        pnEnemyCards.repaint();
        pnEnemyCards.revalidate();
        pnMyCard.revalidate();
        System.out.println("Reset giao dien xong");
    }
    
    public void start() {
        
        try {
            
            me = new Player();
            enemy = new Player();
            byte[] ip = {(byte) 127, (byte) 0, (byte) 0, (byte) 1};
            InetAddress inet = InetAddress.getByAddress(ip);
            //btnConnect.setEnabled(false);
            socket = new Socket(inet, 9999);

//            os = socket.getOutputStream();
//            oos = new ObjectOutputStream(os);;
            Receiver receiver = new Receiver();
            receiver.start();
        } catch (IOException ex) {
            Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    class Receiver extends Thread {
        
        public Receiver() {
            
        }
        
        @Override
        public void run() {
            
            try {
                
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                OutputStream os = socket.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);
                ExchangeMessage registMessage = new ExchangeMessage();
                registMessage.setCommand(ExchangeMessage.PLAYER_START);
                oos.writeObject(registMessage);
                System.out.println("Sent mess");

                // Variables declaration - do not modify
                // End of variables declaration
                while (true) {
                    // khoi tao stream lang nghe
                    InputStream is = socket.getInputStream();
                    ObjectInputStream ois = new ObjectInputStream(is);
                    ExchangeMessage message = (ExchangeMessage) ois.readObject();
                    // xet dieu kien ket thuc game
                    try {
                        checkBreak();
                    } catch (Exception e) {
                        System.out.println("End game");
                    }
                    
                    switch (message.getCommand()) {
                        case ExchangeMessage.SERVER_SEND_INDEX:
                            ld.dispose();
                            int index = message.getIndex();
                            me.setIndex(index);
                            if (index == 1) {
                                enemy.setIndex(2);
                            } else {
                                enemy.setIndex(1);
                            }
                            System.out.println(index);
                            // oos.writeObject(new ExchangeMessage(ExchangeMessage.CLIENT_CF_INDEX));

//                            OutputStream os_2 = socket.getOutputStream();
//                            ObjectOutputStream oos_2 = new ObjectOutputStream(os_2);
//                            ;
//                            oos_2.writeObject(new ExchangeMessage(ExchangeMessage.PLAYER_STAND));
                            break;
                        case ExchangeMessage.CLIENT_SEND_CARD_TO_PLAYER:
                            System.out.println("Receive");
                            System.out.println(message.getPlayers());
                            players = message.getPlayers();
                            for (Player player : players) {
                                if (player.getIndex() == me.getIndex()) {
                                    me.setCards(player.getCards());
                                } else {
                                    enemy.setCards(player.getCards());
                                }
                            }
                            showAll(0);
                            break;
                        case ExchangeMessage.SERVER_UPDATE_CARD_TO_PLAYER:
                            if (me.getIndex() == message.getIndex()) {
                                me.addCard(message.getCardToAdd());
                            } else {
                                enemy.addCard(message.getCardToAdd());
                            }
                            showAll(0);
                            if ((me.getPoint() > 21 || enemy.getPoint() > 21) & notif == false) {
                                sendStand();
                                notif = true;
                            }
                            break;
                        case ExchangeMessage.SERVER_SEND_RESULT:
                            btnRemake.setVisible(true);
                            btnRemake.setEnabled(true);
                            showAll(1);
                            showResult();
                        
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PlayingBoard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        private void showResult() {
//            lblWaiting.setVisible(false);
            btnHit.setVisible(false);
            btnStand.setVisible(false);
            btnRemake.setVisible(true);
//            lblMyPoint.setText(me.getPoint() + " points");
//            lblEnemyPoint.setText(enemy.getPoint() + " points");
            if (me.getPoint() > 21 & enemy.getPoint() > 21) {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("draw"));
            } else if (me.getPoint() > 21) {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("more21"));
                
            } else if (enemy.getPoint() > 21) {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("edie"));
            } else if (me.getPoint() > enemy.getPoint()) {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("won"));
            } else if (me.getPoint() == enemy.getPoint()) {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("draw"));
            } else {
                JOptionPane.showMessageDialog(lblNotif, RB.getString("lose"));
            }
            
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHit;
    private javax.swing.JButton btnRemake;
    private javax.swing.JButton btnStand;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblEnemyPoint;
    private javax.swing.JLabel lblMyPoint;
    private javax.swing.JLabel lblNotif;
    private javax.swing.JPanel pnEnemyCards;
    private javax.swing.JPanel pnMyCard;
    // End of variables declaration//GEN-END:variables

}
